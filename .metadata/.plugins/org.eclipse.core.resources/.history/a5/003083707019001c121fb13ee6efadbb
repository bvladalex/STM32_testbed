#include "state_machine.h"
#include "lcd1602_i2c.h"

extern int addr;
extern struct transition state_transitions[];

int start_state(void)
{
	HD44780_PCF8574_Init(addr);
	HD44780_PCF8574_DisplayClear(addr);
	// display on
	HD44780_PCF8574_DisplayOn(addr);
	// draw char
	HD44780_PCF8574_DrawString(addr, "start state");

	return ok;
}

int vol_state(void)
{
	HD44780_PCF8574_DisplayClear(addr);
	// display on
	HD44780_PCF8574_DisplayOn(addr);
	// draw char
	HD44780_PCF8574_DrawString(addr, "volume state");

	//draw volume bar
	HD44780_PCF8574_PositionXY(addr, 0, 1);
	// draw char
	HD44780_PCF8574_DrawString(addr, 0xFF)

	return ok;
}

int bal_state(void)
{
	HD44780_PCF8574_DisplayClear(addr);
	// display on
	HD44780_PCF8574_DisplayOn(addr);
	// draw char
	HD44780_PCF8574_DrawString(addr, "balance state");


	return ok;
}

int fan_state(void)
{
	HD44780_PCF8574_DisplayClear(addr);
	// display on
	HD44780_PCF8574_DisplayOn(addr);
	// draw char
	HD44780_PCF8574_DrawString(addr, "fan state");


	return ok;
}


enum state_codes lookup_transitions(enum state_codes current, enum ret_codes ret)
//enum state_codes lookup_transitions(enum state_codes current, enum ret_codes ret, struct transition st_tr[])
{
	//struct transition state_transitions[];
	//state_transitions=st_tr;
	int i = 0;
	enum state_codes temp = fan;
	for (i = 0;; ++i) {
	  if (state_transitions[i].src_state == current && state_transitions[i].ret_code == ret) {
		temp = state_transitions[i].dst_state;
		break;
	  }
	}
	return temp;
}
