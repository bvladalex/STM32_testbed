/*
 * main.c
 *
 *  Created on: Jul 21, 2021
 *      Author: Vlad
 */

/* Includes ------------------------------------------------------------------*/
//#include "stm32f10x.h"
//#include "stm32f10x_gpio.h"
//#include "stm32f10x_rcc.h"
//#include "stm32f10x_conf.h"
//#include "stm32_eval.h"
#include "stm32f10x_conf.h"
#include "stm32f10x_i2c.h"
#include "lcd1602_i2c.h"
#include "delay_stm32f1.h"
#include "stm32f10x.h"
#include "state_machine.h"


/** @addtogroup STM32F10x_StdPeriph_Examples
  * @{
  */

/** @addtogroup GPIO_IOToggle
  * @{
  */

/* Private typedef -----------------------------------------------------------*/



/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
uint8_t a = 1;
//uint8_t addr=0xD0;
uint8_t addr=0x4E;
uint8_t data=0x69;
uint16_t tmp;
uint32_t dummy_read, wait;
uint8_t send_i2c_flag=1;
uint8_t change_state=0;

/* definitions related to the state machine*/
enum state_codes cur_state = start;
enum ret_codes rc;
int (*state_fun)(void);

struct transition state_transitions[] = {
	{start, ok,     vol},
	{vol,   ok,     bal},
	{bal,   ok,     fan},
	{fan,   ok, 	vol}};

int (*state[])(void) = { start_state, vol_state, bal_state, fan_state};



RCC_ClocksTypeDef RCC_Clocks;
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void RCC_Configuration(void);
void GPIO_Configuration(void);
void NVIC_Configuration(void);
void EXTI_Configuration(void);
void I2C_Configuration(void);
void toggle_led(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t value);

/**
  * @brief  Main program.
  * @param  None
  * @retval None
  */
int main(void)
{


	/* System clocks configuration ---------------------------------------------*/
	RCC_Configuration();

	/* NVIC configuration ------------------------------------------------------*/
	NVIC_Configuration();

	/* GPIO configuration ------------------------------------------------------*/
	GPIO_Configuration();

	/* EXTI configuration ------------------------------------------------------*/
	EXTI_Configuration();

	/*I2C configuration*/
	I2C_Configuration();

	DelayInit();

/*Starting the state machine*/
	state_fun = state[cur_state];
	rc = state_fun();
	cur_state = lookup_transitions(cur_state, rc);
/*
	// init LCD with address
	HD44780_PCF8574_Init(addr);

    // DISPLAY - SCREEN TEXT
	// -------------------------------------------------
	// display clear
	HD44780_PCF8574_DisplayClear(addr);
	// display on
	HD44780_PCF8574_DisplayOn(addr);
	// draw char
	HD44780_PCF8574_DrawString(addr, "start state");

*/
	DelayMs(2000);

	state_fun = state[cur_state];
	rc = state_fun();
	cur_state = lookup_transitions(cur_state, rc);
/*
	// init LCD with address
	//HD44780_PCF8574_Init(addr);

	// DISPLAY - SCREEN TEXT
	// -------------------------------------------------
	// display clear
	HD44780_PCF8574_DisplayClear(addr);
	// display on
	HD44780_PCF8574_DisplayOn(addr);
	// draw char
	HD44780_PCF8574_DrawString(addr, "state 1");
*/

  while (1)
  {
	  if(change_state==1){
		  state_fun = state[cur_state];
		  rc = state_fun();
		  cur_state = lookup_transitions(cur_state, rc);
		  change_state=0;
	  }


  }


}

void EXTI0_IRQHandler(void){
	EXTI_ClearITPendingBit(EXTI_Line0);
	EXTI_ClearFlag(EXTI_Line0);
	change_state=1;
}

void EXTI3_IRQHandler(void){
	EXTI_ClearITPendingBit(EXTI_Line3);
	EXTI_ClearFlag(EXTI_Line3);
	change_state=1;
}

void EXTI4_IRQHandler(void){
	EXTI_ClearITPendingBit(EXTI_Line4);
	EXTI_ClearFlag(EXTI_Line4);
	change_state=1;
}



/**
  * @}
  */

/**
  * @}
  */

void RCC_Configuration(void){
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);

}
void GPIO_Configuration(void){

	GPIO_InitTypeDef GPIO_InitStructure;

	//start configuration for I2C1 on PORTB

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
	//GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	//start config for LED
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
	//GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOC, &GPIO_InitStructure);

	//start config for mode btn

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
	//GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	//start config for up and down buttons
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3|GPIO_Pin_4;
	//GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

}

void NVIC_Configuration(void){

	NVIC_InitTypeDef NVIC_InitStruct;
//testt
	GPIOC->BSRR = 0x20000000;
	////////////
	NVIC_InitStruct.NVIC_IRQChannel=EXTI0_IRQn;
	NVIC_InitStruct.NVIC_IRQChannelCmd=ENABLE;
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority=1;
	NVIC_InitStruct.NVIC_IRQChannelSubPriority=0;
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
	NVIC_Init(&NVIC_InitStruct);
	NVIC_SetPriority(SysTick_IRQn, 0);

	/*Enable core interrupts for up and down buttons*/

	NVIC_InitStruct.NVIC_IRQChannel=EXTI3_IRQn;
	//NVIC_InitStruct.NVIC_IRQChannelCmd=ENABLE;
	//NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority=1;
	//NVIC_InitStruct.NVIC_IRQChannelSubPriority=0;
	NVIC_Init(&NVIC_InitStruct);

	NVIC_InitStruct.NVIC_IRQChannel=EXTI4_IRQn;
	//NVIC_InitStruct.NVIC_IRQChannelCmd=ENABLE;
	//NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority=1;
	//NVIC_InitStruct.NVIC_IRQChannelSubPriority=0;
	NVIC_Init(&NVIC_InitStruct);


}
void EXTI_Configuration(void){

	EXTI_InitTypeDef EXTI_InitStruct;
	/*EXTI config for mode buton*/

	GPIO_EXTILineConfig(GPIO_PortSourceGPIOB,GPIO_PinSource0);
	  //continue with EXTI regs
	EXTI_InitStruct.EXTI_Line=EXTI_Line0;
	EXTI_InitStruct.EXTI_LineCmd=ENABLE;
	EXTI_InitStruct.EXTI_Mode=EXTI_Mode_Interrupt;
	EXTI_InitStruct.EXTI_Trigger=EXTI_Trigger_Rising;
	EXTI_Init(&EXTI_InitStruct);

	/*EXTI config for up and down buttons*/
	//down button
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOB,GPIO_PinSource3);
	//up button
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOB,GPIO_PinSource4);
	//continue with EXTI regs
	EXTI_InitStruct.EXTI_Line=EXTI_Line3;
	EXTI_Init(&EXTI_InitStruct);

	EXTI_InitStruct.EXTI_Line=EXTI_Line4;
	EXTI_Init(&EXTI_InitStruct);

}

void I2C_Configuration(void){
	I2C_InitTypeDef I2C_InitStruct;
	I2C_InitStruct.I2C_Ack=I2C_Ack_Disable;
	I2C_InitStruct.I2C_AcknowledgedAddress=I2C_AcknowledgedAddress_7bit;
	I2C_InitStruct.I2C_ClockSpeed=100000;
	I2C_InitStruct.I2C_DutyCycle=I2C_DutyCycle_2;
	I2C_InitStruct.I2C_Mode=I2C_Mode_I2C;
	I2C_InitStruct.I2C_OwnAddress1=0;

	//commnet following line for custom values like above;
	//I2C_StructInit(&I2C_InitStruct);

	I2C_Init(I2C1,&I2C_InitStruct);
	I2C_Cmd(I2C1,ENABLE);


}
void toggle_led(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t value){
	if (value == 1)
		GPIO_ResetBits(GPIOC, GPIO_Pin);
	else
		GPIO_SetBits(GPIOC, GPIO_Pin);

}

/******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/
